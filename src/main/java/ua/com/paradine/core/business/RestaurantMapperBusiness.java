package ua.com.paradine.core.business;

import java.util.Set;
import java.util.stream.Collectors;
import org.mapstruct.InheritConfiguration;
import org.mapstruct.IterableMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import ua.com.paradine.domain.PopularTime;
import ua.com.paradine.domain.Restaurant;

@Mapper
/*
  Since JPA Entities are auto-generated by JHipster (and likely to change in future), <br/>
  I've decided to create a separate set of symmetrical value objects to use in business operations. <br/>
  This mapper converts DAO objects (JPA entities) into value objects. <br/>
  <br/>
  Note that the data fields in value objects are *not* the same as in JPA Entities. <br/>
 */
public interface RestaurantMapperBusiness {

    RestaurantVO dbEntityToValueObject(Restaurant restaurant);

    SafetyVO convertToSafety(RestaurantVO restaurant, SafetyMarker safety);

    default Set<SafetyVO> convertToSafety(Set<RestaurantVO> restaurants, SafetyMarker marker) {
        return restaurants.stream().map(r -> convertToSafety(r, marker)).collect(Collectors.toSet());
    }

    PopularTimeVO dbEntityToValueObject(PopularTime popularTime);
    Set<PopularTimeVO> dbEntityToValueObject(Set<PopularTime> popularTime);
}
