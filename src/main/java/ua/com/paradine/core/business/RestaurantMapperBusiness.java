package ua.com.paradine.core.business;

import java.util.List;
import java.util.Set;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;
import ua.com.paradine.core.business.vo.ClassifiedRestaurantVO;
import ua.com.paradine.core.business.vo.HourlyClassifier;
import ua.com.paradine.core.business.vo.PopularTimeVO;
import ua.com.paradine.core.business.vo.RestaurantVO;
import ua.com.paradine.core.business.vo.WorkingHoursVO;
import ua.com.paradine.core.business.vo.commands.SubmitVisitIntentCommand;
import ua.com.paradine.domain.IntendedVisit;
import ua.com.paradine.domain.PopularTime;
import ua.com.paradine.domain.Restaurant;
import ua.com.paradine.domain.WorkingHours;

@Mapper(unmappedTargetPolicy = ReportingPolicy.ERROR)
/*
  Since JPA Entities are auto-generated by JHipster (and likely to change in future), <br/>
  I've decided to create a separate set of symmetrical value objects to use in business operations. <br/>
  This mapper converts DAO objects (JPA entities) into value objects. <br/>
  <br/>
  Note that the data fields in value objects are *not* always the same as in JPA Entities. <br/>
 */
public interface RestaurantMapperBusiness {

    RestaurantVO dbEntityToValueObject(Restaurant restaurant);

    ClassifiedRestaurantVO convertToSafety(RestaurantVO restaurant, List<HourlyClassifier> classifiersToday,
        List<HourlyClassifier> classifiersTomorrow);

    PopularTimeVO dbEntityToValueObject(PopularTime popularTime);

    WorkingHoursVO dbEntityToValueObject(WorkingHours workingHours);

//    @Mapping(target = "visitStartDate", source = "when")
//    @Mapping(target = "visitEndDate", ignore = true)
//    @Mapping(target = "restaurant", ignore = true)
//    @Mapping(target = "id", ignore = true)
//    @Mapping(target = "visitingUser", source = "user")
//    @Mapping(target = "cancelled", expression = "java(Boolean.FALSE)")
//    IntendedVisit commandToDbEntity(SubmitVisitIntentCommand command);
}
